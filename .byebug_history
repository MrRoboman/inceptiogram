c
params[:picture][:public_id]
params[:picture]
c
params[:picture]['0']
params[:picture][:0]
params[:picture]
params[:picture][:public_id]
params
c
self.includes(:owner, likes: [:user], comments: [:author]).where(user_id: leader_ids)
self.includes(:owner, likes: [:user], comments: [:author]).where(user_id: leaders_id)
leader_ids
c
self.where(user_id: [1,2])
self.where(user_id: [1])
self.where(user_id: 1)
self.where('user_id IN ?', [1])
self.where(user_id: 1)
self.where('user_id IN ?', [1,2])
self.where('user_id IN ?', [2])
self.where('user_id IN ?', [1])
self.where(user_id:2)
self.where(id:1)
self
current_user.leaders.map(&:id)
current_user.leaders.map(:id)
current_user.leaders.map {|leader| leader.id}
current_user.leaders
c
current_user.leaders
current_user
c
current_user
c
@picture
c
pic.url
pic
n
c
param[1]['public_id']
param[1]['url']
param[1].url
param[1]
param[1].public_id
c
param
c
param
c
params
param
params
c
param
c
user
current_user
c
current_user
n
s
c
param[1]
param
c
params
c
params
c
params
c
params
c
params
c
params
c
AC
C
ENV['CLOUD_NAME']
c
C
ENV['UPLOAD_PRESET']
ENV['CLOUD_NAME']
Figaro.env.UPDATE_PRESET
Figaro.env.CLOUD_NAME
Figaro
c
Picture.all_with_deets
Picture.all
c
current_user
User.includes(:pictures, :followers).where.not(id: current_user.id)
c
Figaro
c
params[:id]
params
c
exit
c
profile.following?(current_user.id)
current_user
current_suer
c
profile.following?
c
n
profile.pictures
c
n
profile.id
profile
asdfasfUser.all
exit
c
profile.pictures.take(3)
profile.pictures
profile.pics
@profiles
c
n
c
n
c
like.destroy
n
like
n
params
c
like_params
params[:like]
params
c
picture.liked_by?(User.first)
picture.liked_by?(current_user)
c
picture.likes.find_by_user_id(current_user.id)
picture.likes
picture.like
picture
c
likes.find_by_user_id(3)
likes.find_by_user_id(2)
likes.find_by_user_id(2
likes.find(1)
likes.include?(1)
likes
c
@comment
n
current_user
c
current_user
c
@comment
c
logged_in?
c
current_user
logged_in?
c
user.errors.full_messages
c
n
current_user
user
n
params
c
BCrypt
c
BCrypt
